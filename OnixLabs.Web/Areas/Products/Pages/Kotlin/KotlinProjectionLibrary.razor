@page "/Products/Kotlin/Projection"

<PageTitle>ONIXLabs | Kotlin Projection Library</PageTitle>

<Section Class="bg-kotlin-fade" Centered="true">
    <Headline>Kotlin Projection Library</Headline>
    <Callout>Streamlined data transformation for layered architectures</Callout>
    <div class="col-12 col-md-4 offset-md-4">
        <Image Class="img-fluid" Description="Kotlin Projection Library"
               Url="onixlabs/images/icons/kotlin/kotlin-projection-outline.svg"/>
    </div>
    <Paragraph Lead="true">
        A lightweight, convention-based projection library for Kotlin that enables clean, boilerplate-free mapping between data classes. It
        auto-maps matching fields, supports custom overrides, and leverages Kotlinâ€™s reflection for safe, type-aware transformations. Ideal
        for converting between domain, DTO, and persistence models, it helps maintain clear layer separation with minimal overhead. Built
        for clarity and efficiency, it simplifies a traditionally messy task.
    </Paragraph>
    <ActionButtons>
        <ActionButton Class="btn-dark" Icon="fa-brands fa-github" Text="View GitHub Repository" OpenInNewTab="true"
                      Url="https://github.com/onix-labs/onixlabs-kotlin-projection"/>
        <ActionButton Class="btn-dark" Icon="fa-solid fa-box-open" Text="View Maven Packages" OpenInNewTab="true"
                      Url="https://github.com/orgs/onix-labs/packages?repo_name=onixlabs-kotlin-projection"/>
    </ActionButtons>
</Section>

<Section>
    <Headline Centered="true">APIs at a Glance</Headline>
    <Callout Centered="true">Discover the capabilities built to elevate your Kotlin applications</Callout>

    <Row>
        <Summary Title="Type-Safe Projection">
            <Paragraph>
                The Kotlin Projection API provides a robust, type-safe mechanism for mapping one object to another using Kotlin reflection.
                At its core is the Projector abstract class, which drives the transformation logic by inspecting constructor parameters
                and applying registered type converters. Projections can be fully automatic or manually customized through builder lambdas.
            </Paragraph>
        </Summary>
        <Summary Title="Projection Builder DSL">
            <Paragraph>
                The ProjectionBuilder offers a fluent DSL for defining projection rules, including support for custom value injection,
                conditional mapping, and cross-property conversions. It supports multiple syntaxes (e.g., by property, by name, or via
                lambda), enabling fine-grained control over how data flows from source to target types.
            </Paragraph>
        </Summary>
    </Row>

    <Row>
        <Summary Title="Type Converter Configuration">
            <Paragraph>
                Projections rely on a flexible TypeConverterConfiguration registry that resolves appropriate converters between types.
                Default behavior includes identity conversion for matching types and custom error handling for unknown mappings. You can
                register your own converters or override defaults for granular control of how values are translated.
            </Paragraph>
        </Summary>
        <Summary Title="Projection Safety">
            <Paragraph>
                Projection failures are wrapped in ProjectionException, with contextual diagnostics such as mismatched types, missing
                parameters, and nullability violations. ProjectionContext ensures every value is validated against its target parameter's
                constraints, enforcing safe, predictable transformation logic during runtime.
            </Paragraph>
        </Summary>
    </Row>
</Section>

<Section Class="bg-kotlin text-white">
    <Headline Class="text-white" Centered="true">Other Products for Kotlin</Headline>

    <hr class="mt-5"/>

    <Product
        Title="Core Library"
        ImageUrl="onixlabs/images/icons/kotlin/kotlin-core-outline.svg"
        InfoUrl="/Products/Kotlin/Core"
        Hook="Not flashy, but fiercely practical. The kind of toolkit that's quietly dependable.">
        Offers a comprehensive set of Kotlin extensions and utilities designed to streamline common programming tasks. It enhances standard
        types like Byte, Int, Double, and String with fluent, expressive operations, while also extending collections and mathematical types
        for cleaner code. The library includes time-related helpers, lightweight reflection tools, and flexible type conversion APIs to
        reduce boilerplate and improve readability. Built with clarity and consistency in mind, it supports developers looking to write more
        idiomatic and maintainable Kotlin.
    </Product>

    <hr/>

    <Product
        Title="Validation Library"
        ImageUrl="onixlabs/images/icons/kotlin/kotlin-validation-outline.svg"
        InfoUrl="/Products/Kotlin/Validation"
        Hook="Not just a validator. It's the silent enforcer behind clean, dependable Kotlin code.">
        A fluent, type-safe validation framework for Kotlin that enables clear, expressive checks across complex object graphs. It supports
        nested rules, functional error accumulation, and reusable validators with customizable messaging. Designed for minimal boilerplate
        and seamless domain integration, it makes enforcing business constraints straightforward and maintainable.
    </Product>
</Section>