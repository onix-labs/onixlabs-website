@page "/Products/Kotlin/Core"

<PageTitle>ONIXLabs | Kotlin Core Library</PageTitle>

<Section Class="bg-kotlin-fade" Centered="true">
    <Headline>Kotlin Core Library</Headline>
    <Callout>Essential building blocks for modern Kotlin development</Callout>
    <div class="col-12 col-md-4 offset-md-4">
        <Image Class="img-fluid" Description="Kotlin Core Library"
               Url="onixlabs/images/icons/kotlin/kotlin-core-outline.svg"/>
    </div>
    <Paragraph Lead="true">
        Offers a comprehensive set of Kotlin extensions and utilities designed to streamline common programming tasks. It enhances standard
        types like Byte, Int, Double, and String with fluent, expressive operations, while also extending collections and mathematical types
        for cleaner code. The library includes time-related helpers, lightweight reflection tools, and flexible type conversion APIs to
        reduce boilerplate and improve readability. Built with clarity and consistency in mind, it supports developers looking to write more
        idiomatic and maintainable Kotlin.
    </Paragraph>
    <ActionButtons>
        <ActionButton Class="btn-dark" Icon="fa-brands fa-github" Text="View GitHub Repository" OpenInNewTab="true"
                      Url="https://github.com/onix-labs/onixlabs-kotlin-core"/>
        <ActionButton Class="btn-dark" Icon="fa-solid fa-box-open" Text="View Maven Packages" OpenInNewTab="true"
                      Url="https://github.com/orgs/onix-labs/packages?repo_name=onixlabs-kotlin-core"/>
    </ActionButtons>
</Section>

<Section>
    <Headline Centered="true">APIs at a Glance</Headline>
    <Callout Centered="true">Discover the capabilities built to elevate your Kotlin applications</Callout>

    <Row>
        <Summary Title="Primitive Type Extensions">
            <Paragraph>
                Extension functions for Int, Float, Double, Long, Short, Byte, and BigDecimal provide constants
                like ZERO and ONE, as well as numeric utilities such as isInteger, toBigDecimal, toBigInteger, and more.
                These help express numeric logic clearly and idiomatically across different scales and types.
            </Paragraph>
        </Summary>
        <Summary Title="String & Text Utilities">
            <Paragraph>
                Adds the String.EMPTY constant and methods like wrap, toUpperSnakeCase, toLowerSnakeCase, toUpperKebabCase, and
                toLowerKebabCase. These provide fluent transformations for formatting, serialization, and identifier generation.
            </Paragraph>
        </Summary>
    </Row>

    <Row>
        <Summary Title="Reflection Extensions">
            <Paragraph>
                Extension support for KClass, and KType helps bridge Kotlin's reflection and sequence APIs with
                concise, reusable operations. These utilities enable safer introspection patterns.
            </Paragraph>
        </Summary>
        <Summary Title="Date and Time Utilities">
            <Paragraph>
                Utility functions in and domain types like DayOfMonth and DayOfMonthOccurrence provide
                expressive ways to model time-related logic, such as monthly scheduling and ISO duration formatting.
            </Paragraph>
        </Summary>
    </Row>

    <Row>
        <Summary Title="Console Color">
            <Paragraph>
                Console styling is powered by the ConsoleColor enum, which defines a full palette of ANSI-compatible foreground and
                background colors. Paired with ConsoleColorModifier, these colors can be dynamically formatted using escape sequences for
                terminal output. Extensions to the Console API make it easy to apply structured styles in CLI applications, ideal for
                highlighting logs, prompts, errors, and results with clear visual cues.
            </Paragraph>
        </Summary>
        <Summary Title="Type Conversion API">
            <Paragraph>
                A robust set of type converters; for example, IntTypeConverter, UUIDTypeConverter, BigDecimalTypeConverter, and more,
                enable safe, declarative casting between primitives and complex types. Includes custom exception handling via
                IllegalTypeConversionException for reliable validation.
            </Paragraph>
        </Summary>
    </Row>
</Section>

<Section Class="bg-kotlin text-white">
    <Headline Class="text-white" Centered="true">Other Products for Kotlin</Headline>

    <hr class="mt-5"/>

    <Product
        Title="Projection Library"
        ImageUrl="onixlabs/images/icons/kotlin/kotlin-projection-outline.svg"
        InfoUrl="/Products/Kotlin/Projection"
        Hook="Deceptively simple on the outside. Pure Kotlin magic where it counts.">
        A lightweight, convention-based projection library for Kotlin that enables clean, boilerplate-free mapping between data classes. It
        auto-maps matching fields, supports custom overrides, and leverages Kotlinâ€™s reflection for safe, type-aware transformations. Ideal
        for converting between domain, DTO, and persistence models, it helps maintain clear layer separation with minimal overhead. Built
        for clarity and efficiency, it simplifies a traditionally messy task.
    </Product>

    <hr/>

    <Product
        Title="Validation Library"
        ImageUrl="onixlabs/images/icons/kotlin/kotlin-validation-outline.svg"
        InfoUrl="/Products/Kotlin/Validation"
        Hook="Not just a validator. It's the silent enforcer behind clean, dependable Kotlin code.">
        A fluent, type-safe validation framework for Kotlin that enables clear, expressive checks across complex object graphs. It supports
        nested rules, functional error accumulation, and reusable validators with customizable messaging. Designed for minimal boilerplate
        and seamless domain integration, it makes enforcing business constraints straightforward and maintainable.
    </Product>
</Section>